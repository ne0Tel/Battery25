# Generated by Django 5.1 on 2024-08-21 06:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AlembicVersion',
            fields=[
                ('version_num', models.CharField(max_length=32, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'alembic_version',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Autodata',
            fields=[
                ('id', models.CharField(primary_key=True, serialize=False)),
                ('auction_date', models.DateTimeField(blank=True, null=True)),
                ('auction', models.CharField(blank=True, null=True)),
                ('marka_id', models.IntegerField(blank=True, null=True)),
                ('model_id', models.IntegerField(blank=True, null=True)),
                ('marka_name', models.CharField(blank=True, null=True)),
                ('model_name', models.CharField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('is_sanction', models.BooleanField(blank=True, null=True)),
                ('eng_v', models.IntegerField(blank=True, null=True)),
                ('pw', models.CharField(blank=True, null=True)),
                ('kuzov', models.CharField(blank=True, null=True)),
                ('grade', models.CharField(blank=True, null=True)),
                ('color', models.CharField(blank=True, null=True)),
                ('true_color', models.CharField(blank=True, null=True)),
                ('kpp', models.CharField(blank=True, null=True)),
                ('kpp_type', models.IntegerField(blank=True, null=True)),
                ('priv', models.CharField(blank=True, null=True)),
                ('true_priv', models.CharField(blank=True, null=True)),
                ('mileage', models.IntegerField(blank=True, null=True)),
                ('equip', models.CharField(blank=True, null=True)),
                ('rate', models.CharField(blank=True, null=True)),
                ('finish', models.IntegerField(blank=True, null=True)),
                ('images', models.CharField(blank=True, null=True)),
                ('country_provider', models.CharField(blank=True, null=True)),
                ('wheel_type', models.CharField(blank=True, null=True)),
                ('last_updated_currency', models.DateField(blank=True, null=True)),
                ('last_parsing_date', models.DateField(blank=True, null=True)),
                ('inside_rub_price', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('outside_rub_price', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
            ],
            options={
                'db_table': 'autodata',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateField(blank=True, null=True)),
                ('usd', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('eur', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('jpy', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('krw', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('cny', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
            ],
            options={
                'db_table': 'currency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BodyTypeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Тип кузова')),
            ],
            options={
                'verbose_name': 'Тип кузова',
                'verbose_name_plural': 'Типы кузова',
            },
        ),
        migrations.CreateModel(
            name='CityModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='CountryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
            },
        ),
        migrations.CreateModel(
            name='ExternalReviewsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название ресурса')),
                ('link', models.CharField(max_length=255, verbose_name='Ссылка')),
                ('api_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='API ID компании в 2GIS')),
                ('company_id', models.IntegerField(verbose_name='ID компании в VL.RU или в 2GIS')),
                ('rate', models.FloatField(blank=True, null=True, verbose_name='Оценка')),
                ('reviews_count', models.IntegerField(blank=True, null=True, verbose_name='Количество отзывов')),
            ],
            options={
                'verbose_name': 'Оценка на внешних ресурсах',
                'verbose_name_plural': 'Оценки на внешних ресурсах',
            },
        ),
        migrations.CreateModel(
            name='MainPagePosterModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('clients_rate', models.FloatField(verbose_name='Рейтинг клиентов')),
                ('market_age', models.CharField(max_length=20, verbose_name='Лет на рынке')),
                ('brought_auto', models.CharField(max_length=20, verbose_name='Привезенных авто')),
                ('repeated_appeal', models.CharField(max_length=100, verbose_name='Повторно обращается')),
            ],
            options={
                'verbose_name': 'Постер на главной странице',
                'verbose_name_plural': 'Постер на главной странице',
            },
        ),
        migrations.CreateModel(
            name='PhotoCarsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='main_page_cars/')),
            ],
            options={
                'verbose_name': 'Фото машины',
                'verbose_name_plural': 'Фото машин',
            },
        ),
        migrations.CreateModel(
            name='YouTubeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=255, verbose_name='Ссылка на канал')),
                ('api_key', models.CharField(max_length=255, verbose_name='API KEY для работы с API Google')),
                ('channel_id', models.CharField(max_length=255, verbose_name='ID канал на YouTube')),
            ],
            options={
                'verbose_name': 'Информация о YouTube канале',
                'verbose_name_plural': 'Информация о YouTube канале',
            },
        ),
        migrations.CreateModel(
            name='YouTubeVideosModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок видео')),
                ('video_id', models.CharField(max_length=255, verbose_name='ID видео на YouTube')),
                ('cover_url', models.CharField(max_length=255, verbose_name='URL на кавер видео')),
            ],
            options={
                'verbose_name': 'Видео',
                'verbose_name_plural': 'Видео',
            },
        ),
        migrations.CreateModel(
            name='DeliveryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField(verbose_name='Цена доставки')),
                ('path_time', models.IntegerField(verbose_name='Суток в пути')),
                ('body_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_api.bodytypemodel')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_api.citymodel')),
            ],
            options={
                'verbose_name': 'Доставка',
                'verbose_name_plural': 'Доставка',
            },
        ),
        migrations.CreateModel(
            name='MainPageCarsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(max_length=255, verbose_name='Марка машины')),
                ('model', models.CharField(max_length=255, verbose_name='Модель машины')),
                ('price', models.IntegerField(verbose_name='Цена')),
                ('rating', models.FloatField(verbose_name='Оценка')),
                ('year', models.IntegerField(verbose_name='Год')),
                ('mileage', models.IntegerField(verbose_name='Пробег')),
                ('body_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_api.bodytypemodel')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_api.countrymodel')),
                ('img', models.ManyToManyField(null=True, to='car_api.photocarsmodel', verbose_name='Фотографии авто')),
            ],
            options={
                'verbose_name': 'Машина на главной странице',
                'verbose_name_plural': 'Машины на главной странице',
            },
        ),
        migrations.CreateModel(
            name='ContactsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('whatsapp_link', models.CharField(help_text='Ссылка на WhatsApp', max_length=255)),
                ('telegram_link', models.CharField(help_text='Ссылка на Telegram', max_length=255)),
                ('instagram_link', models.CharField(help_text='Ссылка на Instagram', max_length=255)),
                ('youtube', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='car_api.youtubemodel')),
            ],
            options={
                'verbose_name': 'Контакт',
                'verbose_name_plural': 'Контакты',
            },
        ),
        migrations.CreateModel(
            name='YouTubePlaylistsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название плейлиста')),
                ('playlist_id', models.CharField(max_length=255, verbose_name='ID плейлиста на YouTube')),
                ('videos', models.ManyToManyField(blank=True, null=True, to='car_api.youtubevideosmodel', verbose_name='Видео из плейлиста')),
            ],
            options={
                'verbose_name': 'Плейлист',
                'verbose_name_plural': 'Плейлисты',
            },
        ),
    ]
